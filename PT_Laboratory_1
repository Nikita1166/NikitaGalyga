#include <iostream>
#include <string>
#include <windows.h>
class Info {
public:
    virtual std::string fileName() = 0;
    virtual ~Info(){};
};
class _Info : public Info {
    std::string Path;
    WIN32_FIND_DATA fileData;
public:
    _Info(std::string _Path, WIN32_FIND_DATA _fileData) : Path(_Path), fileData(_fileData) {}
    std::string fileName();
};
std::string _Info::fileName()
{
    return Path + fileData.cFileName;
}
class Iterator {
public:
    virtual Info* next() = 0;
    virtual ~Iterator() {}
};

class _Iterator : public Iterator {
    HANDLE descriptor_search;
    WIN32_FIND_DATA findFileData;
    Iterator* a;
    bool signal_first_search;
    std::string Path;
    std::string Exp;
    bool expansion();
    std::string Break(std::string Path);
public:
    _Iterator(std::string _Path, std::string _Exp): Path(_Path), Exp(_Exp), descriptor_search(0), signal_first_search(true), a(NULL){}
    ~_Iterator()
    {
        if (a != NULL) {
            delete a;
        }
        FindClose(descriptor_search);
    }
    Info* next();
};
Info* _Iterator::next()
{
   while (true) {
        if (a != NULL) {
            Info* p = a->next();
            if (p != NULL) {
                return p;
            }
            delete a;
            a = NULL;
        }
        if (signal_first_search) {
            descriptor_search = FindFirstFile((Path + "*.*").c_str(), &findFileData);
            signal_first_search = false;
            if (descriptor_search == INVALID_HANDLE_VALUE) {
                return NULL;
            }
        }
        else {
            if (FindNextFile(descriptor_search, &findFileData) == 0) {
                return NULL;
            }
        }
        if ((strcmp(findFileData.cFileName, ".") == 0) || (strcmp(findFileData.cFileName, "..") == 0)) {
            continue;
        }
        if (findFileData.dwFileAttributes != FILE_ATTRIBUTE_DIRECTORY) {
            if (expansion()) {
                return new _Info(Path, findFileData);
            }
        }
        a = new _Iterator((Path + findFileData.cFileName + "\\").c_str(), (Exp).c_str());
    }
}

bool _Iterator::expansion() // описание метода hasMask класса fileIterator
{
    std::string temp_exp = Break(Path + findFileData.cFileName);
    if (strcmp((temp_exp).c_str(), (Exp).c_str()) == 0) {
        return true;
    }
    else {
        return false;
    }
}

std::string _Iterator::Break(std::string Path) // описание метода BreakPath класса fileIterator
{
    int i = 0, j = 0;
    std::string str_ex;
    for (i = Path.length() - 1; i > 0; i--) {
        if (Path[i] == '.') {
            for (j = i; j <= (int)Path.length() - 1; j++) {
                str_ex.push_back(Path[j]);
            }
            return str_ex;
        }
    }
}

int main()
{
    setlocale(LC_ALL, "rus");
    std::string Path;
    std::string Exp;
    double rez = 0;

    std::cout << "Введите директорию поиска:" << std::endl;
    std::cin >> Path;
    std::cout << "Ввидите расширение файлов:" << std::endl;
    std::cin >> Exp;

    Info* info = NULL;
    Iterator* b = new _Iterator(Path, Exp);
    while ((info = b->next()) != NULL) {
        std::cout << info->fileName() << std::endl;
        rez++;
        delete info;
    }
    std::cout << "\nВсего найдено:\t" <<  rez << " файл(ов)." << std::endl;
    return 0;
}
